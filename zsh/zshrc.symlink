# lang
export LC_ALL="no_NO.UTF-8"
export LANG="no_NO.UTF-8"
export LC_CTYPE="no_NO.UTF-8"

# initialize autocomplete here, otherwise functions won't be loaded
if type brew &>/dev/null; then
    source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    source $(brew --prefix)/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh
    source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
    autoload -Uz compinit
    compinit -i
fi

# shortcut to this dotfiles path is $ZSH
export ZSHDOT=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/development/dagpenger

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSHDOT/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done


# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

#stern zsh completion code
source <(stern --completion=zsh)


# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

# https://kubernetes.io/docs/tasks/tools/included/optional-kubectl-configs-zsh/
source <(kubectl completion zsh)
complete -F __start_kubectl k

# default java from sdkman
export JAVA_HOME="$HOME/.sdkman/candidates/java/current"
export JRE_HOME=$JAVA_HOME

export PATH=${KREW_ROOT:-$HOME/.krew}/bin:~/bin:$PATH

# override curl
export PATH="/usr/local/opt/curl/bin:$PATH"

# local bin
export PATH="$HOME/bin:$PATH"

# edgedb
export PATH="$PATH:/Users/l153963/Library/Application Support/edgedb/bin"

# Node version manager START
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# Node version manager END

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/l153963/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/l153963/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/l153963/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/l153963/google-cloud-sdk/completion.zsh.inc'; fi

hedo() {
    adam=$(id | grep -o "80(admin)")
    if [[ "$adam" != "" ]]; then
        echo "I Have The Power"
    else
        echo "By The Power Of Greyskull"
        /Applications/Privileges.app/Contents/Resources/PrivilegesCLI --add
        echo "I Have The Power"
    fi
}


[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


export STARSHIP_CONFIG=~/.dotfiles/starship/starship.toml

eval "$(starship init zsh)"

